/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.aksh.kafka.avro.fake;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TradeData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -440109918007888657L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradeData\",\"namespace\":\"com.aksh.kafka.avro.fake\",\"fields\":[{\"name\":\"tradeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"double\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"traderName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"traderFirm\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"portfolioId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"buy\",\"type\":\"boolean\"},{\"name\":\"orderTimestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"currentPosition\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"buyPrice\",\"type\":\"double\"},{\"name\":\"sellPrice\",\"type\":\"double\"},{\"name\":\"profit\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TradeData> ENCODER =
      new BinaryMessageEncoder<TradeData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TradeData> DECODER =
      new BinaryMessageDecoder<TradeData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TradeData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TradeData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TradeData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TradeData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TradeData from a ByteBuffer. */
  public static TradeData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String tradeId;
  @Deprecated public java.lang.String symbol;
  @Deprecated public double quantity;
  @Deprecated public double price;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.String traderName;
  @Deprecated public java.lang.String traderFirm;
  @Deprecated public java.lang.String orderId;
  @Deprecated public java.lang.String portfolioId;
  @Deprecated public java.lang.String customerId;
  @Deprecated public boolean buy;
  @Deprecated public java.lang.String orderTimestamp;
  @Deprecated public java.lang.String currentPosition;
  @Deprecated public double buyPrice;
  @Deprecated public double sellPrice;
  @Deprecated public double profit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TradeData() {}

  /**
   * All-args constructor.
   * @param tradeId The new value for tradeId
   * @param symbol The new value for symbol
   * @param quantity The new value for quantity
   * @param price The new value for price
   * @param timestamp The new value for timestamp
   * @param description The new value for description
   * @param traderName The new value for traderName
   * @param traderFirm The new value for traderFirm
   * @param orderId The new value for orderId
   * @param portfolioId The new value for portfolioId
   * @param customerId The new value for customerId
   * @param buy The new value for buy
   * @param orderTimestamp The new value for orderTimestamp
   * @param currentPosition The new value for currentPosition
   * @param buyPrice The new value for buyPrice
   * @param sellPrice The new value for sellPrice
   * @param profit The new value for profit
   */
  public TradeData(java.lang.String tradeId, java.lang.String symbol, java.lang.Double quantity, java.lang.Double price, java.lang.Long timestamp, java.lang.String description, java.lang.String traderName, java.lang.String traderFirm, java.lang.String orderId, java.lang.String portfolioId, java.lang.String customerId, java.lang.Boolean buy, java.lang.String orderTimestamp, java.lang.String currentPosition, java.lang.Double buyPrice, java.lang.Double sellPrice, java.lang.Double profit) {
    this.tradeId = tradeId;
    this.symbol = symbol;
    this.quantity = quantity;
    this.price = price;
    this.timestamp = timestamp;
    this.description = description;
    this.traderName = traderName;
    this.traderFirm = traderFirm;
    this.orderId = orderId;
    this.portfolioId = portfolioId;
    this.customerId = customerId;
    this.buy = buy;
    this.orderTimestamp = orderTimestamp;
    this.currentPosition = currentPosition;
    this.buyPrice = buyPrice;
    this.sellPrice = sellPrice;
    this.profit = profit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tradeId;
    case 1: return symbol;
    case 2: return quantity;
    case 3: return price;
    case 4: return timestamp;
    case 5: return description;
    case 6: return traderName;
    case 7: return traderFirm;
    case 8: return orderId;
    case 9: return portfolioId;
    case 10: return customerId;
    case 11: return buy;
    case 12: return orderTimestamp;
    case 13: return currentPosition;
    case 14: return buyPrice;
    case 15: return sellPrice;
    case 16: return profit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tradeId = (java.lang.String)value$; break;
    case 1: symbol = (java.lang.String)value$; break;
    case 2: quantity = (java.lang.Double)value$; break;
    case 3: price = (java.lang.Double)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: description = (java.lang.String)value$; break;
    case 6: traderName = (java.lang.String)value$; break;
    case 7: traderFirm = (java.lang.String)value$; break;
    case 8: orderId = (java.lang.String)value$; break;
    case 9: portfolioId = (java.lang.String)value$; break;
    case 10: customerId = (java.lang.String)value$; break;
    case 11: buy = (java.lang.Boolean)value$; break;
    case 12: orderTimestamp = (java.lang.String)value$; break;
    case 13: currentPosition = (java.lang.String)value$; break;
    case 14: buyPrice = (java.lang.Double)value$; break;
    case 15: sellPrice = (java.lang.Double)value$; break;
    case 16: profit = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tradeId' field.
   * @return The value of the 'tradeId' field.
   */
  public java.lang.String getTradeId() {
    return tradeId;
  }

  /**
   * Sets the value of the 'tradeId' field.
   * @param value the value to set.
   */
  public void setTradeId(java.lang.String value) {
    this.tradeId = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Double getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Double value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'traderName' field.
   * @return The value of the 'traderName' field.
   */
  public java.lang.String getTraderName() {
    return traderName;
  }

  /**
   * Sets the value of the 'traderName' field.
   * @param value the value to set.
   */
  public void setTraderName(java.lang.String value) {
    this.traderName = value;
  }

  /**
   * Gets the value of the 'traderFirm' field.
   * @return The value of the 'traderFirm' field.
   */
  public java.lang.String getTraderFirm() {
    return traderFirm;
  }

  /**
   * Sets the value of the 'traderFirm' field.
   * @param value the value to set.
   */
  public void setTraderFirm(java.lang.String value) {
    this.traderFirm = value;
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.String getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'portfolioId' field.
   * @return The value of the 'portfolioId' field.
   */
  public java.lang.String getPortfolioId() {
    return portfolioId;
  }

  /**
   * Sets the value of the 'portfolioId' field.
   * @param value the value to set.
   */
  public void setPortfolioId(java.lang.String value) {
    this.portfolioId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'buy' field.
   * @return The value of the 'buy' field.
   */
  public java.lang.Boolean getBuy() {
    return buy;
  }

  /**
   * Sets the value of the 'buy' field.
   * @param value the value to set.
   */
  public void setBuy(java.lang.Boolean value) {
    this.buy = value;
  }

  /**
   * Gets the value of the 'orderTimestamp' field.
   * @return The value of the 'orderTimestamp' field.
   */
  public java.lang.String getOrderTimestamp() {
    return orderTimestamp;
  }

  /**
   * Sets the value of the 'orderTimestamp' field.
   * @param value the value to set.
   */
  public void setOrderTimestamp(java.lang.String value) {
    this.orderTimestamp = value;
  }

  /**
   * Gets the value of the 'currentPosition' field.
   * @return The value of the 'currentPosition' field.
   */
  public java.lang.String getCurrentPosition() {
    return currentPosition;
  }

  /**
   * Sets the value of the 'currentPosition' field.
   * @param value the value to set.
   */
  public void setCurrentPosition(java.lang.String value) {
    this.currentPosition = value;
  }

  /**
   * Gets the value of the 'buyPrice' field.
   * @return The value of the 'buyPrice' field.
   */
  public java.lang.Double getBuyPrice() {
    return buyPrice;
  }

  /**
   * Sets the value of the 'buyPrice' field.
   * @param value the value to set.
   */
  public void setBuyPrice(java.lang.Double value) {
    this.buyPrice = value;
  }

  /**
   * Gets the value of the 'sellPrice' field.
   * @return The value of the 'sellPrice' field.
   */
  public java.lang.Double getSellPrice() {
    return sellPrice;
  }

  /**
   * Sets the value of the 'sellPrice' field.
   * @param value the value to set.
   */
  public void setSellPrice(java.lang.Double value) {
    this.sellPrice = value;
  }

  /**
   * Gets the value of the 'profit' field.
   * @return The value of the 'profit' field.
   */
  public java.lang.Double getProfit() {
    return profit;
  }

  /**
   * Sets the value of the 'profit' field.
   * @param value the value to set.
   */
  public void setProfit(java.lang.Double value) {
    this.profit = value;
  }

  /**
   * Creates a new TradeData RecordBuilder.
   * @return A new TradeData RecordBuilder
   */
  public static com.aksh.kafka.avro.fake.TradeData.Builder newBuilder() {
    return new com.aksh.kafka.avro.fake.TradeData.Builder();
  }

  /**
   * Creates a new TradeData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TradeData RecordBuilder
   */
  public static com.aksh.kafka.avro.fake.TradeData.Builder newBuilder(com.aksh.kafka.avro.fake.TradeData.Builder other) {
    return new com.aksh.kafka.avro.fake.TradeData.Builder(other);
  }

  /**
   * Creates a new TradeData RecordBuilder by copying an existing TradeData instance.
   * @param other The existing instance to copy.
   * @return A new TradeData RecordBuilder
   */
  public static com.aksh.kafka.avro.fake.TradeData.Builder newBuilder(com.aksh.kafka.avro.fake.TradeData other) {
    return new com.aksh.kafka.avro.fake.TradeData.Builder(other);
  }

  /**
   * RecordBuilder for TradeData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradeData>
    implements org.apache.avro.data.RecordBuilder<TradeData> {

    private java.lang.String tradeId;
    private java.lang.String symbol;
    private double quantity;
    private double price;
    private long timestamp;
    private java.lang.String description;
    private java.lang.String traderName;
    private java.lang.String traderFirm;
    private java.lang.String orderId;
    private java.lang.String portfolioId;
    private java.lang.String customerId;
    private boolean buy;
    private java.lang.String orderTimestamp;
    private java.lang.String currentPosition;
    private double buyPrice;
    private double sellPrice;
    private double profit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.aksh.kafka.avro.fake.TradeData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.traderName)) {
        this.traderName = data().deepCopy(fields()[6].schema(), other.traderName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.traderFirm)) {
        this.traderFirm = data().deepCopy(fields()[7].schema(), other.traderFirm);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.orderId)) {
        this.orderId = data().deepCopy(fields()[8].schema(), other.orderId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.portfolioId)) {
        this.portfolioId = data().deepCopy(fields()[9].schema(), other.portfolioId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.customerId)) {
        this.customerId = data().deepCopy(fields()[10].schema(), other.customerId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.buy)) {
        this.buy = data().deepCopy(fields()[11].schema(), other.buy);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.orderTimestamp)) {
        this.orderTimestamp = data().deepCopy(fields()[12].schema(), other.orderTimestamp);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.currentPosition)) {
        this.currentPosition = data().deepCopy(fields()[13].schema(), other.currentPosition);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.buyPrice)) {
        this.buyPrice = data().deepCopy(fields()[14].schema(), other.buyPrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sellPrice)) {
        this.sellPrice = data().deepCopy(fields()[15].schema(), other.sellPrice);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.profit)) {
        this.profit = data().deepCopy(fields()[16].schema(), other.profit);
        fieldSetFlags()[16] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TradeData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.aksh.kafka.avro.fake.TradeData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.traderName)) {
        this.traderName = data().deepCopy(fields()[6].schema(), other.traderName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.traderFirm)) {
        this.traderFirm = data().deepCopy(fields()[7].schema(), other.traderFirm);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.orderId)) {
        this.orderId = data().deepCopy(fields()[8].schema(), other.orderId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.portfolioId)) {
        this.portfolioId = data().deepCopy(fields()[9].schema(), other.portfolioId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.customerId)) {
        this.customerId = data().deepCopy(fields()[10].schema(), other.customerId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.buy)) {
        this.buy = data().deepCopy(fields()[11].schema(), other.buy);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.orderTimestamp)) {
        this.orderTimestamp = data().deepCopy(fields()[12].schema(), other.orderTimestamp);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.currentPosition)) {
        this.currentPosition = data().deepCopy(fields()[13].schema(), other.currentPosition);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.buyPrice)) {
        this.buyPrice = data().deepCopy(fields()[14].schema(), other.buyPrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sellPrice)) {
        this.sellPrice = data().deepCopy(fields()[15].schema(), other.sellPrice);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.profit)) {
        this.profit = data().deepCopy(fields()[16].schema(), other.profit);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'tradeId' field.
      * @return The value.
      */
    public java.lang.String getTradeId() {
      return tradeId;
    }

    /**
      * Sets the value of the 'tradeId' field.
      * @param value The value of 'tradeId'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setTradeId(java.lang.String value) {
      validate(fields()[0], value);
      this.tradeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeId' field has been set.
      * @return True if the 'tradeId' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tradeId' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearTradeId() {
      tradeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setSymbol(java.lang.String value) {
      validate(fields()[1], value);
      this.symbol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Double getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setQuantity(double value) {
      validate(fields()[2], value);
      this.quantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearQuantity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setPrice(double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setDescription(java.lang.String value) {
      validate(fields()[5], value);
      this.description = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearDescription() {
      description = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'traderName' field.
      * @return The value.
      */
    public java.lang.String getTraderName() {
      return traderName;
    }

    /**
      * Sets the value of the 'traderName' field.
      * @param value The value of 'traderName'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setTraderName(java.lang.String value) {
      validate(fields()[6], value);
      this.traderName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'traderName' field has been set.
      * @return True if the 'traderName' field has been set, false otherwise.
      */
    public boolean hasTraderName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'traderName' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearTraderName() {
      traderName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'traderFirm' field.
      * @return The value.
      */
    public java.lang.String getTraderFirm() {
      return traderFirm;
    }

    /**
      * Sets the value of the 'traderFirm' field.
      * @param value The value of 'traderFirm'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setTraderFirm(java.lang.String value) {
      validate(fields()[7], value);
      this.traderFirm = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'traderFirm' field has been set.
      * @return True if the 'traderFirm' field has been set, false otherwise.
      */
    public boolean hasTraderFirm() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'traderFirm' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearTraderFirm() {
      traderFirm = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setOrderId(java.lang.String value) {
      validate(fields()[8], value);
      this.orderId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'portfolioId' field.
      * @return The value.
      */
    public java.lang.String getPortfolioId() {
      return portfolioId;
    }

    /**
      * Sets the value of the 'portfolioId' field.
      * @param value The value of 'portfolioId'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setPortfolioId(java.lang.String value) {
      validate(fields()[9], value);
      this.portfolioId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'portfolioId' field has been set.
      * @return True if the 'portfolioId' field has been set, false otherwise.
      */
    public boolean hasPortfolioId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'portfolioId' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearPortfolioId() {
      portfolioId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setCustomerId(java.lang.String value) {
      validate(fields()[10], value);
      this.customerId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'buy' field.
      * @return The value.
      */
    public java.lang.Boolean getBuy() {
      return buy;
    }

    /**
      * Sets the value of the 'buy' field.
      * @param value The value of 'buy'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setBuy(boolean value) {
      validate(fields()[11], value);
      this.buy = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'buy' field has been set.
      * @return True if the 'buy' field has been set, false otherwise.
      */
    public boolean hasBuy() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'buy' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearBuy() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderTimestamp' field.
      * @return The value.
      */
    public java.lang.String getOrderTimestamp() {
      return orderTimestamp;
    }

    /**
      * Sets the value of the 'orderTimestamp' field.
      * @param value The value of 'orderTimestamp'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setOrderTimestamp(java.lang.String value) {
      validate(fields()[12], value);
      this.orderTimestamp = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'orderTimestamp' field has been set.
      * @return True if the 'orderTimestamp' field has been set, false otherwise.
      */
    public boolean hasOrderTimestamp() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'orderTimestamp' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearOrderTimestamp() {
      orderTimestamp = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentPosition' field.
      * @return The value.
      */
    public java.lang.String getCurrentPosition() {
      return currentPosition;
    }

    /**
      * Sets the value of the 'currentPosition' field.
      * @param value The value of 'currentPosition'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setCurrentPosition(java.lang.String value) {
      validate(fields()[13], value);
      this.currentPosition = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'currentPosition' field has been set.
      * @return True if the 'currentPosition' field has been set, false otherwise.
      */
    public boolean hasCurrentPosition() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'currentPosition' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearCurrentPosition() {
      currentPosition = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'buyPrice' field.
      * @return The value.
      */
    public java.lang.Double getBuyPrice() {
      return buyPrice;
    }

    /**
      * Sets the value of the 'buyPrice' field.
      * @param value The value of 'buyPrice'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setBuyPrice(double value) {
      validate(fields()[14], value);
      this.buyPrice = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'buyPrice' field has been set.
      * @return True if the 'buyPrice' field has been set, false otherwise.
      */
    public boolean hasBuyPrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'buyPrice' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearBuyPrice() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellPrice' field.
      * @return The value.
      */
    public java.lang.Double getSellPrice() {
      return sellPrice;
    }

    /**
      * Sets the value of the 'sellPrice' field.
      * @param value The value of 'sellPrice'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setSellPrice(double value) {
      validate(fields()[15], value);
      this.sellPrice = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'sellPrice' field has been set.
      * @return True if the 'sellPrice' field has been set, false otherwise.
      */
    public boolean hasSellPrice() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'sellPrice' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearSellPrice() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'profit' field.
      * @return The value.
      */
    public java.lang.Double getProfit() {
      return profit;
    }

    /**
      * Sets the value of the 'profit' field.
      * @param value The value of 'profit'.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder setProfit(double value) {
      validate(fields()[16], value);
      this.profit = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'profit' field has been set.
      * @return True if the 'profit' field has been set, false otherwise.
      */
    public boolean hasProfit() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'profit' field.
      * @return This builder.
      */
    public com.aksh.kafka.avro.fake.TradeData.Builder clearProfit() {
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TradeData build() {
      try {
        TradeData record = new TradeData();
        record.tradeId = fieldSetFlags()[0] ? this.tradeId : (java.lang.String) defaultValue(fields()[0]);
        record.symbol = fieldSetFlags()[1] ? this.symbol : (java.lang.String) defaultValue(fields()[1]);
        record.quantity = fieldSetFlags()[2] ? this.quantity : (java.lang.Double) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Double) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.description = fieldSetFlags()[5] ? this.description : (java.lang.String) defaultValue(fields()[5]);
        record.traderName = fieldSetFlags()[6] ? this.traderName : (java.lang.String) defaultValue(fields()[6]);
        record.traderFirm = fieldSetFlags()[7] ? this.traderFirm : (java.lang.String) defaultValue(fields()[7]);
        record.orderId = fieldSetFlags()[8] ? this.orderId : (java.lang.String) defaultValue(fields()[8]);
        record.portfolioId = fieldSetFlags()[9] ? this.portfolioId : (java.lang.String) defaultValue(fields()[9]);
        record.customerId = fieldSetFlags()[10] ? this.customerId : (java.lang.String) defaultValue(fields()[10]);
        record.buy = fieldSetFlags()[11] ? this.buy : (java.lang.Boolean) defaultValue(fields()[11]);
        record.orderTimestamp = fieldSetFlags()[12] ? this.orderTimestamp : (java.lang.String) defaultValue(fields()[12]);
        record.currentPosition = fieldSetFlags()[13] ? this.currentPosition : (java.lang.String) defaultValue(fields()[13]);
        record.buyPrice = fieldSetFlags()[14] ? this.buyPrice : (java.lang.Double) defaultValue(fields()[14]);
        record.sellPrice = fieldSetFlags()[15] ? this.sellPrice : (java.lang.Double) defaultValue(fields()[15]);
        record.profit = fieldSetFlags()[16] ? this.profit : (java.lang.Double) defaultValue(fields()[16]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TradeData>
    WRITER$ = (org.apache.avro.io.DatumWriter<TradeData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TradeData>
    READER$ = (org.apache.avro.io.DatumReader<TradeData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
